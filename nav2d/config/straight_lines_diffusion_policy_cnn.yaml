name: train_diffusion_unet_hybrid
_target_: diffusion_policy.workspace.train_diffusion_unet_hybrid_workspace.TrainDiffusionUnetHybridWorkspace

task_name: ${task.name}
shape_meta: ${task.shape_meta}
exp_name: default

# horizon: 32
horizon: 64
n_obs_steps: 2
n_action_steps: 8
n_latency_steps: 0
dataset_obs_steps: ${n_obs_steps}
keypoint_visible_rate: 1.0
obs_as_global_cond: true
past_action_visible: false

policy:
  _target_: diffusion_policy.policy.diffusion_unet_hybrid_image_policy.DiffusionUnetHybridImagePolicy

  shape_meta: ${shape_meta}
  
  noise_scheduler:
    _target_: diffusers.schedulers.scheduling_ddpm.DDPMScheduler
    num_train_timesteps: 100
    beta_start: 0.0001
    beta_end: 0.02
    beta_schedule: squaredcos_cap_v2
    variance_type: fixed_small # Yilun's paper uses fixed_small_log instead, but easy to cause Nan
    clip_sample: True # required when predict_epsilon=False
    prediction_type: epsilon # or sample

  horizon: ${horizon}
  n_action_steps: ${eval:'${n_action_steps}+${n_latency_steps}'}
  n_obs_steps: ${n_obs_steps}
  num_inference_steps: 100
  obs_as_global_cond: ${obs_as_global_cond}
  # crop_shape: [76, 76]
  crop_shape: null
  diffusion_step_embed_dim: 128
  down_dims: [512, 1024, 2048]
  kernel_size: 5
  n_groups: 8
  cond_predict_scale: True
  obs_encoder_group_norm: True
  eval_fixed_crop: True

ema:
  _target_: diffusion_policy.model.diffusion.ema_model.EMAModel
  update_after_step: 0
  inv_gamma: 1.0
  power: 0.75
  min_value: 0.0
  max_value: 0.9999

dataloader:
  batch_size: 64
  num_workers: 8
  shuffle: True
  pin_memory: True
  persistent_workers: False

val_dataloader:
  batch_size: 64
  num_workers: 8
  shuffle: False
  pin_memory: True
  persistent_workers: False

optimizer:
  _target_: torch.optim.AdamW
  lr: 1.0e-4
  betas: [0.95, 0.999]
  eps: 1.0e-8
  weight_decay: 1.0e-6

training:
  device: "cuda:6"
  seed: 42
  debug: False
  resume: True
  # optimization
  lr_scheduler: cosine
  lr_warmup_steps: 500
  num_epochs: 3050
  gradient_accumulate_every: 1
  # EMA destroys performance when used with BatchNorm
  # replace BatchNorm with GroupNorm.
  use_ema: True
  # training loop control
  # in epochs
  rollout_every: 50
  checkpoint_every: 50
  val_every: 1
  
  # TODO: no validation for now
  # val_every: 1000000  

  sample_every: 5
  # steps per epoch
  max_train_steps: null
  max_val_steps: null
  # misc
  tqdm_interval_sec: 1.0

logging:
  project: diffusion_policy_debug
  resume: True
  mode: online
  name: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}
  tags: ["${name}", "${task_name}", "${exp_name}"]
  id: null
  group: null

checkpoint:
  topk:
    monitor_key: test_mean_score
    mode: max
    k: 5
    format_str: 'epoch={epoch:04d}-test_mean_score={test_mean_score:.3f}.ckpt'
  save_last_ckpt: True
  save_last_snapshot: False

multi_run:
  run_dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  wandb_name_base: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}

task:
  name: straight_lines
  # image_shape: &image_shape [3, 24, 24]
  image_shape: &image_shape [3, 96, 96]
  shape_meta: &shape_meta
    # acceptable types: rgb, low_dim
    obs:
      image:
        shape: *image_shape
        type: rgb
      agent_pos:
        shape: [2]
        type: low_dim
    action:
      shape: [2]


  dataset:
    _target_: nav2d.exp.straight_lines_train.StraightLinesImageDataset
    horizon: ${horizon}
    # n_samples: 50000
    n_samples: 10000
    grid_size: 96
    # grid_size: 24
    val_ratio: 0.2

  # dataset:
  #   _target_: diffusion_policy.dataset.pusht_image_dataset.PushTImageDataset
  #   zarr_path: data/pusht/pusht_cchi_v7_replay.zarr
  #   horizon: ${horizon}
  #   pad_before: ${eval:'${n_obs_steps}-1'}
  #   pad_after: ${eval:'${n_action_steps}-1'}
  #   seed: 42
  #   val_ratio: 0.02
  #   max_train_episodes: 90


  # TODO: not used
  env_runner:
    # _target_: diffusion_policy.env_runner.pusht_image_runner.PushTImageRunner
    _target_: nav2d.dataset.dummy_dataset.DummyImageRunner
    # n_train: 6
    n_train_vis: 2
    train_start_seed: 0
    # n_test: 50
    n_test_vis: 4
    legacy_test: True
    test_start_seed: 100000
    # max_steps: 300
    # n_envs: null

    max_steps: 1
    n_envs: 1
    n_test: 1
    n_train: 1

    n_obs_steps: ${n_obs_steps}
    n_action_steps: ${n_action_steps}
    fps: 10
    past_action: ${past_action_visible}
